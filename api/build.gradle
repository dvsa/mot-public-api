import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

group 'uk.gov.dvsa.mot'

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "gradle.plugin.aspectj:gradle-aspectj:0.1.6"
    }
}

project.ext {
    aspectjVersion = '1.8.10'
}

apply plugin: 'aspectj.gradle'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'checkstyle'

checkstyle {
    configFile = getRootProject().file("dvsa_java_checks.xml")
    toolVersion = "6.15"
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/test/integration/java')
        }
        resources.srcDir file('src/test/integration/java/resources')
    }
    test {
        java {
            srcDir 'src/test/unit/java'
        }
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'com.google.inject:guice:4.1.0'
    compile 'com.amazonaws:aws-lambda-java-core:1.2.0'
    compile 'com.amazonaws:aws-lambda-java-events:1.1.0'
    compile 'com.amazonaws:aws-lambda-java-log4j2:1.1.0'
    compile 'com.amazonaws.serverless:aws-serverless-java-container-core:1.1'
    compile 'com.amazonaws.serverless:aws-serverless-java-container-jersey:1.1'
    compile 'mysql:mysql-connector-java:5.1.40'
    compile 'org.glassfish.jersey.core:jersey-client:2.27'
    compile 'org.glassfish.jersey.inject:jersey-hk2:2.27'
    compile 'org.glassfish.jersey.media:jersey-media-json-jackson:2.27'
    compile 'org.glassfish.jersey.media:jersey-media-moxy:2.27'
    compile 'org.glassfish.jersey.connectors:jersey-apache-connector:2.27'
    compile 'org.apache.logging.log4j:log4j-api:2.11.0'
    compile 'org.apache.logging.log4j:log4j-core:2.11.0'
    compile 'org.apache.logging.log4j:log4j-jcl:2.11.0'
    compile 'org.apache.logging.log4j:log4j-jul:2.11.0'
    compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.11.0'
    compile 'commons-lang:commons-lang:2.6'
    compile 'org.codehaus.jackson:jackson-core-asl:1.9.11'

    testCompile 'junit:junit:4.+'
    testCompile 'org.mockito:mockito-core:2.+'
    testCompile 'eu.codearte.catch-exception:catch-exception:1.4.4'
    testCompile 'com.tngtech.java:junit-dataprovider:1.9.3'
}

task wrapper (type: Wrapper)

task setVersion() {
    doFirst {
        project.version = System.env.BUILD_VERSION ?: 'local-dev'
        println "Version set to: ${project.version}"
    }
}

task buildZip(type: Zip) {
    from compileJava
    from processResources
    into('lib') {
        from configurations.runtime
    }
}

task integrationTest(type: Test) {

    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath

    systemProperties = (Map<String, String>) System.getProperties()
}

tasks.withType(Test) {
    testLogging {
        events = [TestLogEvent.PASSED,
                  TestLogEvent.SKIPPED,
                  TestLogEvent.FAILED,
                  TestLogEvent.STANDARD_OUT]
        showStandardStreams = true
        exceptionFormat = TestExceptionFormat.FULL
        showExceptions = true
        showStackTraces = true
        showCauses = true

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

buildZip.dependsOn setVersion
build.dependsOn buildZip
